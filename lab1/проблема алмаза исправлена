class Device:
    def __init__(self, power):
        self.power = power
    
    def turn_on(self):
        print(f"Устройство включено! Мощность: {self.power}W")

# Используем super() для правильного наследования
class NetworkedDevice(Device):
    def __init__(self, power, ip_address):
        super().__init__(power)
        self.ip_address = ip_address
    
    def connect(self):
        print(f"Подключение к сети с IP: {self.ip_address}")

class PortableDevice(Device):
    def __init__(self, power, battery_level):
        super().__init__(power)
        self.battery_level = battery_level
    
    def charge(self):
        print(f"Зарядка... Уровень батареи: {self.battery_level}%")

# Теперь правильно наследуем
class SmartPhone(NetworkedDevice, PortableDevice):
    def __init__(self, power, ip_address, battery_level):
        super().__init__(power=power, ip_address=ip_address)
        # Дополнительная инициализация для PortableDevice
        PortableDevice.__init__(self, power, battery_level)
    
    def call(self):
        print("Дзынь-дзынь! Идёт звонок~ (＾▽＾)")

# Демонстрация работы
print("\nИсправленная версия:")
phone = SmartPhone(power=10, ip_address="192.168.1.42", battery_level=80)
phone.turn_on()      # Работает без проблем!
phone.connect()      # Подключение
phone.charge()       # Зарядка
phone.call()         # Звонок

print("\nПорядок разрешения методов (MRO):")
print(SmartPhone.mro())  # Показывает порядок поиска методов